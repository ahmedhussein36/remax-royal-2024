// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Meta {
  metaTitle       String
  metaDescription String
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  username       String?
  email          String         @unique
  role           String?
  status         String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  favoriteIds    String[]       @db.ObjectId
  accounts       Account[]
  listings       Listing[]
  reservations   Reservation[]
  properties     Property[]
  compounds      Compound[]
  posts          Post[]
  Developer      Developer[]
  Area           Area[]
  Category       Category[]
  Tag            Tag[]
  PostCategory   PostCategory[]
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime      @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  price         Int
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Property {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  slug              String     @unique
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  ref               String
  title             String
  description       String
  content           String
  images            String[]
  mainImage         String
  category          String
  roomCount         Int
  bathroomCount     Int
  propertyType      String
  saleType          String?
  group             String?
  amenities         String[]
  status            String?
  isFeatured        Boolean?
  isAddHome         Boolean?
  isRecommended     Boolean?
  isFooterMenu      Boolean?
  finishing         String?
  deliveryStatus    String?
  furniture         String?
  paymentPlan       String?
  rentalPlan        String?
  rentValue         String?
  RentalPeriod      String?
  rentAvailableDate String?
  downPayment       Int?
  installmentValue  Float?
  installmentPeriod Int?
  developerName     String?
  commissionValue   Float?
  deliveryDate      String?
  country           String
  city              String?
  phone             String
  whatsapp          String
  seoDetails        Meta?
  price             Int
  currency          String
  size              Int
  sizeUnit          String
  userId            String?    @db.ObjectId
  user              User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  developerId       String?    @db.ObjectId
  areaId            String?    @db.ObjectId
  compound          Compound?  @relation(fields: [compoundId], references: [id])
  compoundId        String?    @db.ObjectId
  area              Area?      @relation(fields: [areaId], references: [id])
  Developer         Developer? @relation(fields: [developerId], references: [id])
}

model Compound {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  slug          String     @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  title         String
  content       String
  description   String
  mainImage     String
  images        String[]
  seoDetails    Meta?
  latLong       Float
  isLaunch      String
  status        String
  isFeatured    Boolean
  isAddHome     Boolean
  isFooterMenu  Boolean
  isRecommended Boolean
  properties    Property[]
  developer     Developer? @relation(fields: [developerId], references: [id])
  developerId   String?    @db.ObjectId
  area          Area?      @relation(fields: [areaId], references: [id])
  areaId        String?    @db.ObjectId
  userId        String?    @db.ObjectId
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Developer {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  slug          String     @unique
  title         String
  image         String
  description   String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  seoDetails    Meta?
  status        String?
  isFeatured    Boolean?
  isAddHome     Boolean?
  isFooterMenu  Boolean?
  isRecommended Boolean?
  content       String?
  compound      Compound[]
  property      Property[]
  userId        String?    @db.ObjectId
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Area {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  slug          String     @unique
  title         String
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  image         String?
  lat           Float?
  long          Float?
  status        String?
  seoDetails    Meta?
  isFeatured    Boolean?
  isAddHome     Boolean?
  isFooterMenu  Boolean?
  isRecommended Boolean?
  content       String?
  compounds     Compound[]
  properties    Property[]
  userId        String?    @db.ObjectId
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  slug            String         @unique
  title           String
  image           String
  description     String
  seoDetails      Meta?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          String?
  isFeatured      Boolean?
  isAddHome       Boolean?
  isFooterMenu    Boolean?
  isRecommended   Boolean?
  metaTite        String
  metaDescription String
  posts           PostCategory[]
  userId          String?        @db.ObjectId
  user            User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  slug            String         @unique
  title           String
  image           String?
  content         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          String?
  isFeatured      Boolean?
  isAddHome       Boolean?
  isFooterMenu    Boolean?
  isRecommended   Boolean?
  metaTitle       String?
  metaDescription String?
  tags            PostTags[]
  categories      PostCategory[]
  userId          String?        @db.ObjectId
  user            User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostTags {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  post   Post?   @relation(fields: [postId], references: [id])
  tag    Tag?    @relation(fields: [tagId], references: [id])
  postId String? @db.ObjectId
  tagId  String? @db.ObjectId

  @@index([postId, tagId])
}

model Tag {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  slug        String     @unique
  description String
  title       String     @unique
  posts       PostTags[]
  userId      String?    @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  post       Post?     @relation(fields: [postId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  postId     String?   @db.ObjectId
  categoryId String?   @db.ObjectId
  userId     String?   @db.ObjectId
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, categoryId])
}
