// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  accounts       Account[]
  listings       Listing[]
  reservations   Reservation[]
  properties     Property[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime      @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  price         Int
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Property {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  title             String
  description       String
  content           String
  slug              String
  images            String[]
  mainImage         String
  category          String
  roomCount         Int
  bathroomCount     Int
  propertyType      String
  saleType          String?
  group             String?
  amenities         String[]
  status            String?
  isFeatured        Boolean?
  isAddHome         Boolean?
  isRecommended     Boolean?
  isFooterMenu      Boolean?
  finishing         String?
  deliveryStatus    String?
  furniture         String?
  paymentPlan       String?
  rentalPlan        String?
  rentValue         String?
  RentalPeriod      String?
  rentAvailableDate String?
  downPayment       Int?
  installmentValue  Float?
  installmentPeriod Int?
  developerName     String?
  commissionValue   Float?
  deliveryDate      String?
  country           String
  city              String?
  phone             String
  whatsapp          String
  seoDetails        Json?
  price             Int
  currency          String
  size              Int
  sizeUnit          String
  userId            String     @db.ObjectId
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  developerId       String?    @db.ObjectId
  areaId            String?    @db.ObjectId
  compound          Compound?  @relation(fields: [compoundId], references: [id])
  compoundId        String?    @db.ObjectId
  Area              Area?      @relation(fields: [areaId], references: [id])
  Developer         Developer? @relation(fields: [developerId], references: [id])
}

model Compound {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  title         String
  content       String
  description   String
  slug          String     @unique
  mainImage     String
  images        String[]
  seoDetails    Json?
  latLong       Float
  isLaunch      String
  status        String
  isFeatured    Boolean
  isAddHome     Boolean
  isFooterMenu  Boolean
  isRecommended Boolean
  properties    Property[]
  developer     Developer? @relation(fields: [developerId], references: [id])
  developerId   String?    @db.ObjectId
  area          Area?      @relation(fields: [areaId], references: [id])
  areaId        String?    @db.ObjectId
}

model Developer {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String     @unique
  image         String
  description   String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  status        String?
  isFeatured    Boolean?
  isAddHome     Boolean?
  isFooterMenu  Boolean?
  isRecommended Boolean?
  content       String?
  compound      Compound[]
  property      Property[]
}

model Area {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  slug          String   @unique
  title         String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  image         String?
  lat           Float
  long          Float
  status        String?
  isFeatured    Boolean?
  isAddHome     Boolean?
  isFooterMenu  Boolean?
  isRecommended Boolean?
  content       String?

  compounds  Compound[]
  properties Property[]
}

model PropertyType {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  name_en String
}
