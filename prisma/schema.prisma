// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  accounts       Account[]
  listings       Listing[]
  reservations   Reservation[]
  properties     Property[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime      @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  price         Int
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Property {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  slug              String
  mainImage         String
  images            String[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  category          String
  roomCount         Int
  bathroomCount     Int
  saleType          String
  propertyType      String
  paymentPlan       String
  downPayment       Int
  installmentValue  Int
  installmentPeriod Int
  developerName     String
  commissionValue   Float
  deliveryDate      DateTime
  price             Int
  currency          String
  size              Int
  sizeUnit          String
  address           String
  phone             String
  whatsapp          String
  country           String
  userId            String     @db.ObjectId
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  developerId       String     @db.ObjectId
  developer         Developer? @relation(fields: [developerId], references: [id])
  areaId            String     @db.ObjectId
  area              Area       @relation(fields: [areaId], references: [id])
  Compound          Compound   @relation(fields: [compoundId], references: [id])
  compoundId        String     @db.ObjectId
}

model Compound {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String
  description    String
  slug           String     @unique
  mainImage      String
  images         String[]
  lat            Float
  long           Float
  has_launches   Boolean?
  is_launch      Boolean?
  property_types String[]
  properties     Property[]
  developer      Developer  @relation(fields: [developerId], references: [id])
  developerId    String     @db.ObjectId
  area           Area       @relation(fields: [areaId], references: [id])
  areaId         String     @db.ObjectId
}

model Developer {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String     @unique
  image       String?
  description String?
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  compound    Compound[]
  property    Property[]
  area        Area       @relation(fields: [areaId], references: [id])
  areaId      String     @db.ObjectId
}

model Area {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  areaId      Int         @unique
  slug        String      @unique
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  image       String
  compounds   Compound[]
  Property    Property[]
  developer   Developer[]
}

model PropertyType {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  name_en String
}
